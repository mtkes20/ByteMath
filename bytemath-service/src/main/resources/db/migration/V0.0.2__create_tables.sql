CREATE TABLE BYTEMATH.QUIZ
(
    ID         BIGINT DEFAULT NEXTVAL('BYTEMATH.BYTEMATH_GLOBAL_SEQUENCE') PRIMARY KEY,
    IDENTIFIER VARCHAR(255),
    TITLE_ENG  VARCHAR(255),
    TITLE_GEO  VARCHAR(255)
);

CREATE TABLE BYTEMATH.QUESTION
(
    ID                BIGINT DEFAULT NEXTVAL('BYTEMATH.BYTEMATH_GLOBAL_SEQUENCE') PRIMARY KEY,
    QUESTION_TEXT_ENG VARCHAR(255),
    QUESTION_TEXT_GEO VARCHAR(255),
    QUESTION_TYPE     VARCHAR(255),
    QUIZ_ID           BIGINT NOT NULL,
    FOREIGN KEY (QUIZ_ID) REFERENCES BYTEMATH.QUIZ (ID)
);

CREATE TABLE BYTEMATH.ANSWER
(
    ID              BIGINT DEFAULT NEXTVAL('BYTEMATH.BYTEMATH_GLOBAL_SEQUENCE') PRIMARY KEY,
    ANSWER_TEXT_ENG VARCHAR(255),
    ANSWER_TEXT_GEO VARCHAR(255),
    QUESTION_ID     BIGINT NOT NULL,
    IS_CORRECT      BOOLEAN,
    FOREIGN KEY (QUESTION_ID) REFERENCES BYTEMATH.QUESTION (ID) ON DELETE CASCADE
);

CREATE TABLE BYTEMATH.COURSE
(
    ID   BIGINT DEFAULT NEXTVAL('BYTEMATH.BYTEMATH_GLOBAL_SEQUENCE') PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL
);

CREATE TABLE BYTEMATH.PAGE
(
    ID         BIGINT DEFAULT NEXTVAL('BYTEMATH.BYTEMATH_GLOBAL_SEQUENCE') PRIMARY KEY,
    IDENTIFIER VARCHAR(255),
    COURSE_ID  BIGINT,
    FOREIGN KEY (COURSE_ID) REFERENCES BYTEMATH.COURSE (ID)
);

CREATE TABLE BYTEMATH.BYTEMATH_USER
(
    ID                           BIGINT DEFAULT NEXTVAL('BYTEMATH.BYTEMATH_GLOBAL_SEQUENCE') PRIMARY KEY,
    USERNAME                     VARCHAR(255) UNIQUE,
    PROFILE_PICTURE              TEXT,
    PROFILE_PICTURE_CONTENT_TYPE VARCHAR(255)
);

CREATE TABLE BYTEMATH.BYTEMATH_USER_READ_PAGES
(
    USER_ID BIGINT,
    PAGE_ID BIGINT,
    PRIMARY KEY (USER_ID, PAGE_ID),
    FOREIGN KEY (USER_ID) REFERENCES BYTEMATH.BYTEMATH_USER (ID),
    FOREIGN KEY (PAGE_ID) REFERENCES BYTEMATH.PAGE (ID)
);

CREATE TABLE BYTEMATH.BYTEMATH_USER_QUIZ_SUBMISSIONS
(
    ID              BIGINT DEFAULT NEXTVAL('BYTEMATH.BYTEMATH_GLOBAL_SEQUENCE') PRIMARY KEY,
    USER_ID         BIGINT  NOT NULL,
    QUIZ_ID         BIGINT  NOT NULL,
    QUIZ_IDENTIFIER VARCHAR(255),
    SCORE           INTEGER NOT NULL,
    MAX_SCORE       INTEGER NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES BYTEMATH.BYTEMATH_USER (ID)
);

CREATE TABLE BYTEMATH.BYTEMATH_USER_QUIZ_SUBMISSION_ANSWERS
(
    SUBMISSION_ID      BIGINT NOT NULL,
    QUESTION_ID        BIGINT,
    SELECTED_ANSWER_ID BIGINT,
    TEXT_ANSWER        VARCHAR(255),
    FOREIGN KEY (SUBMISSION_ID) REFERENCES BYTEMATH.BYTEMATH_USER_QUIZ_SUBMISSIONS (ID) ON DELETE CASCADE
);


CREATE TABLE BYTEMATH.PROBLEM
(
    ID                  BIGINT DEFAULT NEXTVAL('BYTEMATH.BYTEMATH_GLOBAL_SEQUENCE') PRIMARY KEY,
    IDENTIFIER          VARCHAR(255),
    TITLE_ENG           VARCHAR(255),
    TITLE_GEO           VARCHAR(255),
    DESCRIPTION_ENG     VARCHAR(1000),
    DESCRIPTION_GEO     VARCHAR(1000),
    TASK_ENG            VARCHAR(1000),
    TASK_GEO            VARCHAR(1000),
    INPUT_FORMAT_ENG    VARCHAR(1000),
    INPUT_FORMAT_GEO    VARCHAR(1000),
    OUTPUT_FORMAT_ENG   VARCHAR(1000),
    OUTPUT_FORMAT_GEO   VARCHAR(1000),
    EXAMPLE_ENG         VARCHAR(1000),
    EXAMPLE_GEO         VARCHAR(1000),
    NOTE_ENG            VARCHAR(1000),
    NOTE_GEO            VARCHAR(1000),
    PYTHON_TEMPLATE_ENG VARCHAR(1000),
    PYTHON_TEMPLATE_GEO VARCHAR(1000),
    JAVA_TEMPLATE_ENG   VARCHAR(5000),
    JAVA_TEMPLATE_GEO   VARCHAR(5000),
    PYTHON              INTEGER,
    JAVA                INTEGER,
    DIFFICULTY          VARCHAR(50),
    COURSE_ID           BIGINT,
    FOREIGN KEY (COURSE_ID) REFERENCES BYTEMATH.COURSE (ID)
);

CREATE TABLE BYTEMATH.TEST_CASE
(
    ID              BIGINT DEFAULT NEXTVAL('BYTEMATH.BYTEMATH_GLOBAL_SEQUENCE') PRIMARY KEY,
    INPUT           VARCHAR(1000),
    EXPECTED_OUTPUT VARCHAR(1000),
    PROBLEM_ID      BIGINT NOT NULL,
    FOREIGN KEY (PROBLEM_ID) REFERENCES BYTEMATH.PROBLEM (ID) ON DELETE CASCADE
);

CREATE TABLE BYTEMATH.USER_PROBLEM_COMPLETION
(
    ID           BIGINT DEFAULT NEXTVAL('BYTEMATH.BYTEMATH_GLOBAL_SEQUENCE') PRIMARY KEY,
    USER_ID      BIGINT    NOT NULL,
    PROBLEM_ID   BIGINT    NOT NULL,
    COMPLETED_AT TIMESTAMP NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES BYTEMATH.BYTEMATH_USER (ID),
    FOREIGN KEY (PROBLEM_ID) REFERENCES BYTEMATH.PROBLEM (ID)
);
