{
  "courses": "Courses",
  "introduction_to_logical_operators_title": "Introduction to Logical Operators",
  "calculate": "Calculate",

  "numberTheory": {
    "modularArithmetic": {
      "title": "Modular Arithmetic",
      "introduction": {
        "title": "What is Modular Arithmetic?",
        "description": "Modular arithmetic is a system of arithmetic for integers, where numbers \"wrap around\" after reaching a certain value — the modulus. It's often described as \"clock arithmetic\" because it's similar to how hours on a clock wrap around from 12 back to 1."
      },
      "keyConcepts": {
        "title": "Key Concepts",
        "list": [
          "Congruence: We say a is congruent to b modulo m if m divides (a-b). We write this as a ≡ b (mod m).",
          "Modular Addition: (a + b) mod m = ((a mod m) + (b mod m)) mod m",
          "Modular Subtraction: (a - b) mod m = ((a mod m) - (b mod m) + m) mod m",
          "Modular Multiplication: (a * b) mod m = ((a mod m) * (b mod m)) mod m",
          "Modular Exponentiation: a^b mod m = ((a mod m)^b) mod m"
        ]
      },
      "applications": {
        "title": "Applications",
        "description": "Modular arithmetic has many applications in computer science and cryptography:",
        "list": [
          "Hash functions",
          "Random number generation",
          "Error detection and correction codes",
          "Cryptographic algorithms (like RSA)"
        ]
      },
      "calculator": {
        "title": "Modular Arithmetic Calculator",
        "result": "Result: {{a}} {{operation}} {{b}} ≡ {{result}} (mod {{m}})"
      }
    },

    "rsaAlgorithm": {
      "title": "RSA Algorithm",
      "whatIsRSA": {
        "title": "What is RSA?",
        "description1": "RSA (Rivest-Shamir-Adleman) is a public-key cryptosystem that is widely used for secure data transmission. It is an asymmetric cryptographic algorithm, meaning it uses two different keys: a public key for encryption and a private key for decryption.",
        "description2": "RSA was first described in 1977 by Ron Rivest, Adi Shamir, and Leonard Adleman at MIT. The letters RSA are the initials of their surnames. It was one of the first practical public-key cryptosystems and is still widely used for secure data transmission."
      },
      "importance": {
        "title": "Importance of RSA",
        "list": [
          "Security: RSA's security is based on the practical difficulty of factoring the product of two large prime numbers, known as the factoring problem.",
          "Digital Signatures: RSA can be used to create digital signatures, ensuring the authenticity and integrity of digital messages or documents.",
          "Key Exchange: It enables secure exchange of keys over insecure channels, which is crucial for establishing secure communication.",
          "Widespread Use: RSA is used in many protocols, including SSL/TLS, which is used to secure internet communications."
        ]
      },
      "howItWorks": {
        "title": "How RSA Works: Detailed Steps",
        "keyGeneration": {
          "title": "1. Key Generation:",
          "steps": [
            "Choose two distinct large prime numbers p and q.",
            "Compute n = p * q. This n is called the modulus for both the public and private keys.",
            "Compute φ(n) = (p-1) * (q-1). This is Euler's totient function.",
            "Choose an integer e such that 1 < e < φ(n) and gcd(e, φ(n)) = 1. This e is the public exponent.",
            "Compute d as the modular multiplicative inverse of e (mod φ(n)). This d is the private exponent."
          ]
        },
        "keyDistribution": {
          "title": "2. Key Distribution:",
          "steps": [
            "The public key is (e, n). This can be known to everyone and is used for encryption.",
            "The private key is (d, n). This must be kept secret and is used for decryption."
          ]
        },
        "encryption": {
          "title": "3. Encryption:",
          "steps": [
            "Convert the message into a number m, where 0 ≤ m < n.",
            "Compute the ciphertext c = m^e mod n."
          ]
        },
        "decryption": {
          "title": "4. Decryption:",
          "steps": [
            "Use the private key (d, n) to compute m = c^d mod n.",
            "Convert m back to the original message."
          ]
        }
      },
      "mathematicalFoundation": {
        "title": "Mathematical Foundation",
        "description": "The security of RSA relies on two mathematical facts:",
        "fact1": "1. Modular Exponentiation: It's computationally easy to calculate n = p * q and c = m^e mod n.",
        "fact2": "2. Prime Factorization: It's computationally difficult to determine p and q from n, especially when p and q are large primes.",
        "additional": "The algorithm also relies on Euler's theorem and the properties of modular arithmetic to ensure that encryption and decryption are inverse operations."
      },
      "securityConsiderations": {
        "title": "Security Considerations",
        "list": [
          "Key Size: The security of RSA depends on the size of n. As of 2021, a key size of 2048 bits is considered secure for most applications.",
          "Prime Number Generation: The prime numbers p and q must be generated randomly and kept secret.",
          "Padding: In practice, RSA is often used with padding schemes like OAEP to enhance security.",
          "Side-Channel Attacks: Implementations must be careful to avoid leaking information through timing or power consumption."
        ]
      },
      "practicalExample": {
        "title": "Practical Example",
        "description": "Let's walk through a simple example with small numbers (note: in practice, much larger numbers are used):",
        "steps": [
          "Choose p = 61 and q = 53",
          "Calculate n = 61 * 53 = 3233",
          "Calculate φ(n) = (61-1) * (53-1) = 3120",
          "Choose e = 17 (coprime with 3120)",
          "Find d such that (d * 17) mod 3120 = 1. d = 2753",
          "Public key is (17, 3233), Private key is (2753, 3233)",
          "To encrypt m = 123: c = 123^17 mod 3233 = 855",
          "To decrypt c = 855: m = 855^2753 mod 3233 = 123"
        ]
      },
      "calculator": {
        "title": "RSA Calculator",
        "prime": "Prime",
        "generateKeys": "Generate Keys",
        "publicKey": "Public Key",
        "privateKey": "Private Key",
        "encrypt": "Encrypt",
        "decrypt": "Decrypt",
        "encrypted": "Encrypted",
        "messageToEncrypt": "Message to Encrypt"
      }
    }
  }

}
