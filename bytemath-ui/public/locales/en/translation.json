{
  "title": "Math for Computer Science",
  "courses": "Courses",
  "signIn": "Sign In",
  "signOut": "Sign Out",
  "introduction_to_logical_operators_title": "Introduction to Logical Operators",
  "calculate": "Calculate",
  "binarySystemTitle": "Binary System",
  "logicalOperandsTitle": "Logical Operands",
  "graphTheoryTitle": "Theory of Graphs",
  "numberTheoryTitle": "Theory of Numbers",
  "introduction": "Introduction",
  "lcm-gcd": "LCM and GCD",
  "rsa-algorithm": "RSA Algorithm",
  "modular-arithmetic": "Modular Arithmetic",
  "quizResults": "Quiz Results",
  "question": "Question",
  "yourAnswer": "Your Answer",
  "correctAnswer": "Correct Answer",
  "totalScore": "Total Score",
  "tryAgain": "Try Again",
  "correct": "Correct",
  "incorrect": "Incorrect",
  "decimalValue": "Decimal Value",
  "binarySystem": {
    "title": "Understanding the Binary System",
    "introduction": "The binary system, also known as the base-2 numeral system, is fundamental to computer science and digital electronics. It forms the foundation of all digital data representation and processing.",
    "fundamentals": {
      "title": "Fundamentals of Binary",
      "description": "The binary system is based on two digits: 0 and 1, known as bits (binary digits). Here are some key points:",
      "points": [
        "Binary uses only two digits compared to decimal's ten digits.",
        "Each digit position represents a power of 2.",
        "The rightmost digit represents 2^0 (1), the next 2^1 (2), then 2^2 (4), and so on.",
        "Binary numbers can represent any quantity that decimal numbers can."
      ]
    },
    "whyBinary": {
      "title": "Why Binary is Used in Computing",
      "description": "Binary is the language of computers for several reasons:",
      "points": [
        "Electronic circuits have two stable states, making binary a natural fit.",
        "It's easier and more reliable to distinguish between two states than multiple states.",
        "Binary operations can be implemented efficiently with digital logic gates.",
        "Error detection and correction are simpler with a binary system."
      ]
    },
    "binaryNumbers": {
      "title": "Understanding Binary Numbers",
      "description": "Binary numbers work similarly to decimal numbers, but with a base of 2 instead of 10:",
      "points": [
        "The binary number 1011 is equivalent to the decimal number 11 (1*2^3 + 0*2^2 + 1*2^1 + 1*2^0).",
        "Each additional bit doubles the range of numbers that can be represented.",
        "8 bits (a byte) can represent numbers from 0 to 255.",
        "Leading zeros don't change the value of a binary number."
      ]
    },
    "binaryOperations": {
      "title": "Basic Binary Operations",
      "description": "Arithmetic in binary follows similar rules to decimal, but with only two digits:",
      "points": [
        "Addition: 1 + 1 = 10 in binary (carry the 1)",
        "Subtraction: Borrow from the next column when needed",
        "Multiplication: Similar to decimal, but simpler as you only multiply by 0 or 1",
        "Division: Can be performed through repeated subtraction and shifting"
      ]
    },
    "applications": {
      "title": "Applications of the Binary System",
      "description": "The binary system is crucial in many areas of computing and technology:",
      "points": [
        "Data Storage: All data in computers is ultimately stored in binary.",
        "Digital Logic: Computer processors use binary for all their operations.",
        "Networking: Data transmission over networks uses binary encoding.",
        "Image and Sound Processing: Digital media is represented and processed in binary.",
        "Cryptography: Many encryption algorithms rely on binary operations."
      ]
    }
  },
  "numberTheory": {
    "introduction": {
      "title": "Introduction to the Theory of Numbers",
      "description": "The Theory of Numbers, also known as Number Theory, is a branch of pure mathematics devoted primarily to the study of the integers and integer-valued functions. It is one of the oldest and most fundamental areas of mathematics, with a rich history dating back to ancient civilizations.",
      "keyConcepts": {
        "title": "Key Concepts in Number Theory:",
        "list": [
          "Prime Numbers: Numbers greater than 1 that have no positive divisors other than 1 and themselves.",
          "Divisibility: The study of when one integer is divisible by another.",
          "Greatest Common Divisor (GCD): The largest positive integer that divides each of the numbers without a remainder.",
          "Least Common Multiple (LCM): The smallest positive integer that is divisible by each of the numbers.",
          "Modular Arithmetic: Arithmetic that deals with the remainders after division.",
          "Diophantine Equations: Polynomial equations where only integer solutions are sought."
        ]
      },
      "applications": {
        "title": "Applications of Number Theory:",
        "list": [
          "Cryptography: Many encryption methods, including RSA, are based on number theory principles.",
          "Computer Science: Algorithms, data structures, and error-correcting codes often rely on number theory concepts.",
          "Physics: Number theory is used in various areas of theoretical physics, including string theory.",
          "Engineering: Applications in signal processing, control theory, and other engineering fields."
        ]
      },
      "conclusion": "Number theory continues to be an active area of research, with many unsolved problems and conjectures that have puzzled mathematicians for centuries."
    },
    "lcmAndGcd": {
      "title": "Least Common Multiple (LCM) and Greatest Common Divisor (GCD)",
      "whatAre": {
        "title": "What are LCM and GCD?",
        "lcm": {
          "title": "Least Common Multiple (LCM)",
          "description": "The LCM of two or more integers is the smallest positive integer that is divisible by each of the integers. For example, the LCM of 4 and 6 is 12."
        },
        "gcd": {
          "title": "Greatest Common Divisor (GCD)",
          "description": "The GCD of two or more integers is the largest positive integer that divides each of the integers without a remainder. For example, the GCD of 8 and 12 is 4."
        }
      },
      "importance": {
        "title": "Why are LCM and GCD important?",
        "list": [
          "LCM is used in many areas of mathematics, including fractions, algebra, and number theory.",
          "GCD is fundamental in simplifying fractions, solving Diophantine equations, and in various algorithms in computer science.",
          "Both LCM and GCD are crucial in cryptography, particularly in the RSA algorithm.",
          "In computer programming, LCM and GCD are used in various algorithms and data structures."
        ]
      },
      "calculation": {
        "title": "How to Calculate LCM and GCD",
        "gcd": {
          "title": "Calculating GCD",
          "description": "The most efficient method to calculate GCD is the Euclidean algorithm:",
          "steps": [
            "Divide the larger number by the smaller one.",
            "Replace the larger number with the smaller number and the smaller number with the remainder from step 1.",
            "Repeat until the remainder is zero. The last non-zero remainder is the GCD."
          ]
        },
        "lcm": {
          "title": "Calculating LCM",
          "description": "LCM can be calculated using the formula:",
          "formula": "LCM(a, b) = |a * b| / GCD(a, b)",
          "note": "Where |a * b| denotes the absolute value of a * b."
        }
      },
      "examples": {
        "title": "Examples",
        "gcd": {
          "title": "GCD Example: Calculate GCD(48, 18)",
          "steps": [
            "48 ÷ 18 = 2 remainder 12",
            "18 ÷ 12 = 1 remainder 6",
            "12 ÷ 6 = 2 remainder 0",
            "The last non-zero remainder is 6, so GCD(48, 18) = 6"
          ]
        },
        "lcm": {
          "title": "LCM Example: Calculate LCM(12, 18)",
          "steps": [
            "First, calculate GCD(12, 18) = 6",
            "Then, LCM(12, 18) = |12 * 18| / 6 = 216 / 6 = 36"
          ]
        }
      },
      "calculator": {
        "enterFirstNumber": "Enter first number",
        "enterSecondNumber": "Enter second number",
        "lcm": "LCM",
        "gcd": "GCD"
      }
    },
    "modularArithmetic": {
      "title": "Modular Arithmetic",
      "introduction": {
        "title": "What is Modular Arithmetic?",
        "description": "Modular arithmetic is a system of arithmetic for integers, where numbers \"wrap around\" after reaching a certain value — the modulus. It's often described as \"clock arithmetic\" because it's similar to how hours on a clock wrap around from 12 back to 1."
      },
      "keyConcepts": {
        "title": "Key Concepts",
        "list": [
          "Congruence: We say a is congruent to b modulo m if m divides (a-b). We write this as a ≡ b (mod m).",
          "Modular Addition: (a + b) mod m = ((a mod m) + (b mod m)) mod m",
          "Modular Subtraction: (a - b) mod m = ((a mod m) - (b mod m) + m) mod m",
          "Modular Multiplication: (a * b) mod m = ((a mod m) * (b mod m)) mod m",
          "Modular Exponentiation: a^b mod m = ((a mod m)^b) mod m"
        ]
      },
      "applications": {
        "title": "Applications",
        "description": "Modular arithmetic has many applications in computer science and cryptography:",
        "list": [
          "Hash functions",
          "Random number generation",
          "Error detection and correction codes",
          "Cryptographic algorithms (like RSA)"
        ]
      },
      "calculator": {
        "title": "Modular Arithmetic Calculator",
        "result": "Result: {{a}} {{operation}} {{b}} ≡ {{result}} (mod {{m}})"
      }
    },
    "rsaAlgorithm": {
      "title": "RSA Algorithm",
      "whatIsRSA": {
        "title": "What is RSA?",
        "description1": "RSA (Rivest-Shamir-Adleman) is a public-key cryptosystem that is widely used for secure data transmission. It is an asymmetric cryptographic algorithm, meaning it uses two different keys: a public key for encryption and a private key for decryption.",
        "description2": "RSA was first described in 1977 by Ron Rivest, Adi Shamir, and Leonard Adleman at MIT. The letters RSA are the initials of their surnames. It was one of the first practical public-key cryptosystems and is still widely used for secure data transmission."
      },
      "importance": {
        "title": "Importance of RSA",
        "list": [
          "Security: RSA's security is based on the practical difficulty of factoring the product of two large prime numbers, known as the factoring problem.",
          "Digital Signatures: RSA can be used to create digital signatures, ensuring the authenticity and integrity of digital messages or documents.",
          "Key Exchange: It enables secure exchange of keys over insecure channels, which is crucial for establishing secure communication.",
          "Widespread Use: RSA is used in many protocols, including SSL/TLS, which is used to secure internet communications."
        ]
      },
      "howItWorks": {
        "title": "How RSA Works: Detailed Steps",
        "keyGeneration": {
          "title": "1. Key Generation:",
          "steps": [
            "Choose two distinct large prime numbers p and q.",
            "Compute n = p * q. This n is called the modulus for both the public and private keys.",
            "Compute φ(n) = (p-1) * (q-1). This is Euler's totient function.",
            "Choose an integer e such that 1 < e < φ(n) and gcd(e, φ(n)) = 1. This e is the public exponent.",
            "Compute d as the modular multiplicative inverse of e (mod φ(n)). This d is the private exponent."
          ]
        },
        "keyDistribution": {
          "title": "2. Key Distribution:",
          "steps": [
            "The public key is (e, n). This can be known to everyone and is used for encryption.",
            "The private key is (d, n). This must be kept secret and is used for decryption."
          ]
        },
        "encryption": {
          "title": "3. Encryption:",
          "steps": [
            "Convert the message into a number m, where 0 ≤ m < n.",
            "Compute the ciphertext c = m^e mod n."
          ]
        },
        "decryption": {
          "title": "4. Decryption:",
          "steps": [
            "Use the private key (d, n) to compute m = c^d mod n.",
            "Convert m back to the original message."
          ]
        }
      },
      "mathematicalFoundation": {
        "title": "Mathematical Foundation",
        "description": "The security of RSA relies on two mathematical facts:",
        "fact1": "1. Modular Exponentiation: It's computationally easy to calculate n = p * q and c = m^e mod n.",
        "fact2": "2. Prime Factorization: It's computationally difficult to determine p and q from n, especially when p and q are large primes.",
        "additional": "The algorithm also relies on Euler's theorem and the properties of modular arithmetic to ensure that encryption and decryption are inverse operations."
      },
      "securityConsiderations": {
        "title": "Security Considerations",
        "list": [
          "Key Size: The security of RSA depends on the size of n. As of 2021, a key size of 2048 bits is considered secure for most applications.",
          "Prime Number Generation: The prime numbers p and q must be generated randomly and kept secret.",
          "Padding: In practice, RSA is often used with padding schemes like OAEP to enhance security.",
          "Side-Channel Attacks: Implementations must be careful to avoid leaking information through timing or power consumption."
        ]
      },
      "practicalExample": {
        "title": "Practical Example",
        "description": "Let's walk through a simple example with small numbers (note: in practice, much larger numbers are used):",
        "steps": [
          "Choose p = 61 and q = 53",
          "Calculate n = 61 * 53 = 3233",
          "Calculate φ(n) = (61-1) * (53-1) = 3120",
          "Choose e = 17 (coprime with 3120)",
          "Find d such that (d * 17) mod 3120 = 1. d = 2753",
          "Public key is (17, 3233), Private key is (2753, 3233)",
          "To encrypt m = 123: c = 123^17 mod 3233 = 855",
          "To decrypt c = 855: m = 855^2753 mod 3233 = 123"
        ]
      },
      "calculator": {
        "title": "RSA Calculator",
        "prime": "Prime",
        "generateKeys": "Generate Keys",
        "publicKey": "Public Key",
        "privateKey": "Private Key",
        "encrypt": "Encrypt",
        "decrypt": "Decrypt",
        "encrypted": "Encrypted",
        "decrypted": "Decrypted",
        "messageToEncrypt": "Message to Encrypt"
      }
    }
  },
  "graphTheory": {
    "introduction": {
      "title": "Introduction to Graph Theory",
      "graphDefinition": {
        "title": "Definition of a Graph",
        "definition": "A graph is a mathematical structure consisting of two sets:",
        "vertices": "V (vertices): A non-empty set of elements called vertices or nodes.",
        "edges": "E (edges): A set of pairs of vertices, representing connections between them.",
        "formal": "Formally, we write a graph as G = (V, E).",
        "explanation": "The graph above shows a simple undirected graph with 6 vertices and 9 edges.",
        "interactionPrompt": "You can click and drag the vertices to rearrange the graph!"
      },
      "graphDirectedness": {
        "title": "Undirected vs Directed Graphs",
        "definition": "Graphs can be classified as undirected or directed based on the nature of their edges:",
        "undirected": {
          "label": "Undirected Graph",
          "description": "Edges have no direction. The relationship between connected vertices is symmetric."
        },
        "directed": {
          "label": "Directed Graph (Digraph)",
          "description": "Edges have a direction. The relationship between connected vertices can be asymmetric."
        },
        "selectedEdge": "Selected edge: {{edge}}",
        "prompt": "Click on an edge in either graph to see the difference in representation.",
        "interactionPrompt": "Click on edges in both graphs to compare undirected and directed representations!"
      },
      "verticesAndEdges": {
        "title": "Vertices and Edges",
        "description": "A graph consists of two main elements:",
        "vertices": {
          "label": "Vertices (Nodes)",
          "description": "Points or circles in the graph"
        },
        "edges": {
          "label": "Edges",
          "description": "Lines connecting the vertices"
        },
        "explanation": "In the example graphs: The circles are vertices. The lines connecting these circles are edges. In the directed graph (right), edges have arrows indicating direction.",
        "interactionPrompt": "Click on \"Vertices\" or \"Edges\" above to highlight them in both graphs!",
        "undirectedGraph": "Undirected Graph",
        "directedGraph": "Directed Graph"
      },
      "vertexDegree": {
        "title": "Degree of a Vertex",
        "description": "The degree of a vertex is the number of edges connected to it. In other words, it's the number of neighbors a vertex has.",
        "undirectedGraphDescription": "For undirected graphs, it's simply the count of edges connected to the vertex.",
        "directedGraphDescription": "For directed graphs, we distinguish between in-degree (incoming edges) and out-degree (outgoing edges).",
        "undirectedGraph": "Undirected Graph",
        "directedGraph": "Directed Graph",
        "undirectedDegreeExplanation": "In the undirected graph, the degree of vertex {{selectedNode}} is {{undirectedDegree}}.",
        "directedDegreeExplanation": "In the directed graph, vertex {{selectedNode}} has in-degree {{inDegree}} and out-degree {{outDegree}}.",
        "selectVertexPrompt": "Click on a vertex in either graph to see its degree.",
        "interactionPrompt": "Click on different vertices in both graphs to compare degrees in undirected and directed graphs!"
      },
      "pathsAndCycles": {
        "title": "Paths and Cycles in Graphs",
        "description": "In graph theory, paths and cycles are fundamental concepts: A path is a sequence of nodes connected by edges, without repeating any node. A cycle is a path that starts and ends at the same node.",
        "pathExplanation": "This is a path: e → f → g → a → b → c → d. It's a sequence of connected nodes without repetition.",
        "cycleExplanation": "This is a cycle: a → b → c → f → g → a. It starts and ends at the same node.",
        "showPathButton": "Show Path",
        "showCycleButton": "Show Cycle",
        "resetButton": "Reset",
        "interactionPrompt": "Click the buttons to see examples of a path and a cycle in the graph."
      },
      "graphConnectivity": {
        "title": "Graph Connectivity",
        "description": "Graph connectivity refers to whether all nodes in a graph are connected. A graph is connected if there is a path between every pair of nodes.",
        "connectedGraph": "Connected Graph",
        "disconnectedGraph": "Disconnected Graph",
        "connectedExplanation": "In this connected graph, you can reach any node from any other node by following the edges.",
        "disconnectedExplanation": "This disconnected graph has two separate components. You cannot reach nodes C or D from A or B.",
        "additionalInfo": "A connected graph has only one component, while a disconnected graph has two or more components. Components are subgraphs where all nodes are connected to each other, but not to nodes in other components."
      },
      "subgraphs": {
        "title": "Subgraphs",
        "description": "A subgraph is a graph whose set of nodes and edges are subsets of another graph. It's like taking a piece of a larger graph while maintaining the connections between the selected elements.",
        "fullGraphExplanation": "This is the full graph. A subgraph is a subset of nodes and edges from this graph.",
        "triangleExplanation": "This triangle (A-B-C) is a subgraph. It includes some, but not all, of the original graph's nodes and edges.",
        "pathExplanation": "This path (B-C-D-E) is also a subgraph. It's a sequence of connected nodes that's part of the larger graph.",
        "showFullGraph": "Show Full Graph",
        "showTriangle": "Show Triangle Subgraph",
        "showPath": "Show Path Subgraph",
        "resetButton": "გადატვირთვა"
      }
    },
    "differentGraphs": {
      "title": "Different Kind of Graphs",
      "planarGraphs": {
        "planarTitle": "Planar Graphs",
        "planarDescription": "A planar graph is a type of graph that can be drawn on a flat surface such that no edges cross, except at their vertices. This means the edges only intersect at their endpoints.",
        "planarLabel": "Planar Graph",
        "nonPlanarLabel": "Non-Planar Graph",
        "planarInteractionPrompt": "Adjust the slider to explore how the graph changes with different node counts. Observe the differences between planar and non-planar graphs.",
        "numberOfNodes": "Number of Nodes"
      },
      "weightedGraphs": {
        "title": "Weighted Graphs",
        "description": "Weighted graphs are graphs in which each edge is assigned a numerical value, called a weight. These weights can represent various real-world quantities such as distance, cost, or capacity. There are two main types of weighted graphs:",
        "undirectedDescription": "Undirected Weighted Graphs: The edges have no direction, and the weight applies in both directions between the connected nodes.",
        "directedDescription": "Directed Weighted Graphs: The edges have a specific direction, and the weight applies only in that direction.",
        "undirectedGraph": "Undirected Weighted Graph",
        "directedGraph": "Directed Weighted Graph",
        "edgeWeightExplanation": "The selected edge {{selectedElement}} has a weight of {{weight}}.",
        "nodeExplanation": "You've selected node {{selectedElement}}. In a weighted graph, the weights are associated with edges, not nodes.",
        "selectElementPrompt": "Click on a node or edge to see more information.",
        "interactionPrompt": "Interact with the graphs above to explore the concept of weighted graphs. Click on edges to see their weights, or on nodes to understand their role in weighted graphs."
      },
      "graphProblems": {
        "title": "Problems for Graph Theory"
      }
    }
  }
}
